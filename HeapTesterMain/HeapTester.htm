<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HeapTester.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HeapTester.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Sat Apr 20 15:51:30 2024
<BR><P>
<H3>Maximum Stack Usage =        904 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
stressTestHeap &rArr; Heap_Malloc &rArr; Knuth_Heap_Malloc &rArr;  Knuth_Heap_Malloc (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[cb]">DisableInterrupts</a>
 <LI><a href="#[d8]">EnableInterrupts</a>
 <LI><a href="#[c5]">StartCritical</a>
 <LI><a href="#[c6]">EndCritical</a>
 <LI><a href="#[c2]">WaitForInterrupt</a>
 <LI><a href="#[116]">SVC_OS_Id</a>
 <LI><a href="#[117]">SVC_OS_Kill</a>
 <LI><a href="#[118]">SVC_OS_Sleep</a>
 <LI><a href="#[119]">SVC_OS_Time</a>
 <LI><a href="#[11a]">SVC_OS_AddThread</a>
 <LI><a href="#[d9]">StartOS</a>
 <LI><a href="#[f0]">ContextSwitch</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8e]">Wait</a>
 <LI><a href="#[8f]">Signal</a>
 <LI><a href="#[90]">bWait</a>
 <LI><a href="#[91]">bSignal</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[18]">ADC0Seq0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC0Seq0_Handler</a><BR>
 <LI><a href="#[c3]">mergeBlock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">mergeBlock</a><BR>
 <LI><a href="#[ed]">fillmessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ed]">fillmessage</a><BR>
 <LI><a href="#[bb]">Knuth_Heap_Malloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">Knuth_Heap_Malloc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC0Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[19]">ADC0Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">ADC0Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">ADC0Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3a]">ADC1Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3b]">ADC1Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3c]">ADC1Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3d]">ADC1Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[31]">CAN0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[32]">CAN1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">CAN2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[23]">Comp0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[24]">Comp1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[25]">Comp2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[34]">Ethernet_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3f]">ExtBus_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5c]">FPU_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[64]">Fan0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[27]">FlashCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIOPortA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b]">GPIOPortB_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">GPIOPortC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">GPIOPortD_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">GPIOPortE_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">GPIOPortF_Handler</a> from os.o(.text.GPIOPortF_Handler) referenced from startup.o(RESET)
 <LI><a href="#[29]">GPIOPortG_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2a]">GPIOPortH_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[40]">GPIOPortJ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[41]">GPIOPortK_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[42]">GPIOPortL_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[61]">GPIOPortM_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[62]">GPIOPortN_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[66]">GPIOPortP1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[67]">GPIOPortP2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[68]">GPIOPortP3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[69]">GPIOPortP4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6a]">GPIOPortP5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6b]">GPIOPortP6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6c]">GPIOPortP7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[65]">GPIOPortP_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6e]">GPIOPortQ1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6f]">GPIOPortQ2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[70]">GPIOPortQ3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[71]">GPIOPortQ4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[72]">GPIOPortQ5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[73]">GPIOPortQ6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[74]">GPIOPortQ7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">GPIOPortQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[75]">GPIOPortR_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[76]">GPIOPortS_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">Hibernate_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[12]">I2C0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2f]">I2C1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4a]">I2C2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4b]">I2C3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5f]">I2C4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[60]">I2C5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3e]">I2S0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[84]">Idle</a> from heaptester.o(.text.Idle) referenced 2 times from heaptester.o(.text.main)
 <LI><a href="#[5e]">LPC0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7d]">OS_Kill</a> from os.o(.text.OS_Kill) referenced 2 times from os.o(.text.OS_AddThread)
 <LI><a href="#[7e]">OS_Timer5A_Counter</a> from os.o(.text.OS_Timer5A_Counter) referenced 2 times from os.o(.text.OS_MsTimerInit)
 <LI><a href="#[5d]">PECI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[13]">PWM0Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[14]">PWM0Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">PWM0Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[16]">PWM0Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[37]">PWM0Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7b]">PWM1Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[77]">PWM1Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[78]">PWM1Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">PWM1Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7a]">PWM1Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from osasm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">Quadrature0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">Quadrature1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[63]">Quadrature2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[11]">SSI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2c]">SSI1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[43]">SSI2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[44]">SSI3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from osasm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[82]">SW1Push</a> from heaptester.o(.text.SW1Push) referenced 2 times from heaptester.o(.text.main)
 <LI><a href="#[83]">SW2Push</a> from heaptester.o(.text.SW2Push) referenced 2 times from heaptester.o(.text.main)
 <LI><a href="#[26]">SysCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from os.o(.text.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[7f]">TestHeap</a> from heaptester.o(.text.TestHeap) referenced 2 times from heaptester.o(.text.SW1Push)
 <LI><a href="#[1d]">Timer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1e]">Timer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1f]">Timer1A_Handler</a> from timer1a.o(.text.Timer1A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[20]">Timer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[21]">Timer2A_Handler</a> from timer2a.o(.text.Timer2A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[22]">Timer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2d]">Timer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2e]">Timer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4c]">Timer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4d]">Timer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4e]">Timer5A_Handler</a> from timer5a.o(.text.Timer5A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[4f]">Timer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[f]">UART0_Handler</a> from uart0int.o(.text.UART0_Handler) referenced from startup.o(RESET)
 <LI><a href="#[10]">UART1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2b]">UART2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[45]">UART3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[46]">UART4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[47]">UART5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[48]">UART6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[49]">UART7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[36]">USB0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1c]">WDT_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[50]">WideTimer0A_Handler</a> from wtimer0a.o(.text.WideTimer0A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[51]">WideTimer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[52]">WideTimer1A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[53]">WideTimer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[54]">WideTimer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[55]">WideTimer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">WideTimer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[57]">WideTimer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[58]">WideTimer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[59]">WideTimer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5a]">WideTimer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">WideTimer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[86]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[85]">fputc</a> from os.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[7c]">main</a> from heaptester.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[80]">stressTestHeap</a> from heaptester.o(.text.stressTestHeap) referenced 2 times from heaptester.o(.text.SW2Push)
 <LI><a href="#[39]">uDMA_Error</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[38]">uDMA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[81]">waitTenms</a> from os.o(.text.waitTenms) referenced 2 times from os.o(.text.initCPUUtilization)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Timer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Timer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Timer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WideTimer1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[110]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[88]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[111]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[112]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[113]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[114]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[115]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[cb]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCPUUtilization
</UL>

<P><STRONG><a name="[d8]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCPUUtilization
</UL>

<P><STRONG><a name="[c5]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
</UL>

<P><STRONG><a name="[c6]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
</UL>

<P><STRONG><a name="[c2]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[116]"></a>SVC_OS_Id</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>SVC_OS_Kill</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>SVC_OS_Sleep</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>SVC_OS_Time</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>SVC_OS_AddThread</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>StartOS</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[f0]"></a>ContextSwitch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; OS_Kill &rArr; Heap_Free &rArr; Worst_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Id
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>Wait</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait
</UL>

<P><STRONG><a name="[8f]"></a>Signal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal
</UL>

<P><STRONG><a name="[90]"></a>bWait</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bWait
</UL>

<P><STRONG><a name="[91]"></a>bSignal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSignal
</UL>

<P><STRONG><a name="[106]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
</UL>

<P><STRONG><a name="[105]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Realloc
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Realloc
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Calloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Calloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Calloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Calloc
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Init
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[120]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[121]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[122]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[123]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[124]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[a2]"></a>Best_Heap_Calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, heapbestfit.o(.text.Best_Heap_Calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Best_Heap_Calloc &rArr; Best_Heap_Malloc &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Realloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Calloc
</UL>

<P><STRONG><a name="[a4]"></a>Best_Heap_Free</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, heapbestfit.o(.text.Best_Heap_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Best_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
</UL>

<P><STRONG><a name="[a7]"></a>Best_Heap_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heapbestfit.o(.text.Best_Heap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Best_Heap_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
</UL>

<P><STRONG><a name="[a3]"></a>Best_Heap_Malloc</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, heapbestfit.o(.text.Best_Heap_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Best_Heap_Malloc &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Calloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
</UL>

<P><STRONG><a name="[bf]"></a>Best_Heap_Stats</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, heapbestfit.o(.text.Best_Heap_Stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Best_Heap_Stats
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Stats
</UL>

<P><STRONG><a name="[fd]"></a>CS_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, edisk.o(.text.CS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[fc]"></a>Delay1ms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, st7735.o(.text.Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[a9]"></a>First_Heap_Calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, heapfirstfit.o(.text.First_Heap_Calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = First_Heap_Calloc &rArr; First_Heap_Malloc &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Calloc
</UL>

<P><STRONG><a name="[ab]"></a>First_Heap_Free</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, heapfirstfit.o(.text.First_Heap_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = First_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Realloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
</UL>

<P><STRONG><a name="[ac]"></a>First_Heap_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heapfirstfit.o(.text.First_Heap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = First_Heap_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
</UL>

<P><STRONG><a name="[aa]"></a>First_Heap_Malloc</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, heapfirstfit.o(.text.First_Heap_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = First_Heap_Malloc &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Realloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Calloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
</UL>

<P><STRONG><a name="[ad]"></a>First_Heap_Realloc</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, heapfirstfit.o(.text.First_Heap_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = First_Heap_Realloc &rArr; First_Heap_Malloc &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Realloc
</UL>

<P><STRONG><a name="[be]"></a>First_Heap_Stats</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, heapfirstfit.o(.text.First_Heap_Stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = First_Heap_Stats
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Stats
</UL>

<P><STRONG><a name="[28]"></a>GPIOPortF_Handler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, os.o(.text.GPIOPortF_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPortF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>GetPriPointer</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, os.o(.text.GetPriPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetPriPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b0]"></a>Heap_Calloc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, heap.o(.text.Heap_Calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Heap_Calloc &rArr; Knuth_Heap_Calloc &rArr; Knuth_Heap_Malloc &rArr;  Knuth_Heap_Malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Calloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Calloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Calloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
</UL>

<P><STRONG><a name="[b3]"></a>Heap_Free</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, heap.o(.text.Heap_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Heap_Free &rArr; Worst_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Free
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[b6]"></a>Heap_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, heap.o(.text.Heap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Heap_Init &rArr; Knuth_Heap_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[b9]"></a>Heap_Malloc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, heap.o(.text.Heap_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Heap_Malloc &rArr; Knuth_Heap_Malloc &rArr;  Knuth_Heap_Malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Malloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Malloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
</UL>

<P><STRONG><a name="[bc]"></a>Heap_Realloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, heap.o(.text.Heap_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Heap_Realloc &rArr; Knuth_Heap_Calloc &rArr; Knuth_Heap_Malloc &rArr;  Knuth_Heap_Malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Realloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Calloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Calloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
</UL>

<P><STRONG><a name="[bd]"></a>Heap_Stats</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, heap.o(.text.Heap_Stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Heap_Stats &rArr; Knuth_Heap_Stats
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Stats
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Stats
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Stats
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Stats
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapStats
</UL>

<P><STRONG><a name="[84]"></a>Idle</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, heaptester.o(.text.Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> heaptester.o(.text.main)
</UL>
<P><STRONG><a name="[b2]"></a>Knuth_Heap_Calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, heapknuth.o(.text.Knuth_Heap_Calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Knuth_Heap_Calloc &rArr; Knuth_Heap_Malloc &rArr;  Knuth_Heap_Malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Realloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Calloc
</UL>

<P><STRONG><a name="[b5]"></a>Knuth_Heap_Free</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, heapknuth.o(.text.Knuth_Heap_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Knuth_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mergeBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
</UL>

<P><STRONG><a name="[b8]"></a>Knuth_Heap_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heapknuth.o(.text.Knuth_Heap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Knuth_Heap_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
</UL>

<P><STRONG><a name="[bb]"></a>Knuth_Heap_Malloc</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, heapknuth.o(.text.Knuth_Heap_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Knuth_Heap_Malloc &rArr;  Knuth_Heap_Malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutBlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Malloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Calloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Malloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
</UL>

<P><STRONG><a name="[c1]"></a>Knuth_Heap_Stats</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, heapknuth.o(.text.Knuth_Heap_Stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Knuth_Heap_Stats
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Stats
</UL>

<P><STRONG><a name="[cd]"></a>LaunchPad_Init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, launchpad.o(.text.LaunchPad_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[103]"></a>OS_AddSW1Task</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, os.o(.text.OS_AddSW1Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_AddSW1Task
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>OS_AddSW2Task</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, os.o(.text.OS_AddSW2Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_AddSW2Task
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>OS_AddThread</STRONG> (Thumb, 566 bytes, Stack size 48 bytes, os.o(.text.OS_AddThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OS_AddThread &rArr; GetPriPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appendToList
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPriPointer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInISR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2Push
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1Push
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[ef]"></a>OS_ClearMsTime</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, os.o(.text.OS_ClearMsTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_ClearMsTime
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2Push
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1Push
</UL>

<P><STRONG><a name="[8a]"></a>OS_Id</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, os.o(.text.OS_Id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[ca]"></a>OS_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os.o(.text.OS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_Init &rArr; ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTimerInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCPUUtilization
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTCBs
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LaunchPad_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>OS_InitSemaphore</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, os.o(.text.OS_InitSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[7d]"></a>OS_Kill</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, os.o(.text.OS_Kill))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OS_Kill &rArr; Heap_Free &rArr; Worst_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeFromList
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPriPointer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapError
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text.OS_AddThread)
</UL>
<P><STRONG><a name="[d6]"></a>OS_Launch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os.o(.text.OS_Launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_Launch &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>OS_MsTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os.o(.text.OS_MsTime))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2Push
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1Push
</UL>

<P><STRONG><a name="[d1]"></a>OS_MsTimerInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os.o(.text.OS_MsTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_MsTimerInit &rArr; Timer5A_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[8b]"></a>OS_Sleep</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os.o(.text.OS_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_Sleep &rArr; OS_Suspend &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateState
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPriPointer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[d5]"></a>OS_Suspend</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os.o(.text.OS_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_Suspend &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>

<P><STRONG><a name="[8c]"></a>OS_Time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os.o(.text.OS_Time))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[107]"></a>OS_TimeDifference</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, os.o(.text.OS_TimeDifference))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TimeDifference
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
</UL>

<P><STRONG><a name="[7e]"></a>OS_Timer5A_Counter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os.o(.text.OS_Timer5A_Counter))
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text.OS_MsTimerInit)
</UL>
<P><STRONG><a name="[a6]"></a>OS_bSignal</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, os.o(.text.OS_bSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateState
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPriPointer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInISR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutBlock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Free
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Malloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Malloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Malloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[a5]"></a>OS_bWait</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os.o(.text.OS_bWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_bWait &rArr; OS_Suspend &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateState
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPriPointer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cutBlock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Free
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Malloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Best_Heap_Malloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_Heap_Malloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[cc]"></a>PLL_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, pll.o(.text.PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[102]"></a>PortD_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, heaptester.o(.text.PortD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>RxFifo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.RxFifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[ff]"></a>RxFifo_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fifosimple.o(.text.RxFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[fe]"></a>RxFifo_Size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.RxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[dd]"></a>ST7735_DrawCharS</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_DrawCharS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutDec
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>

<P><STRONG><a name="[de]"></a>ST7735_DrawPixel</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7735_DrawPixel &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>

<P><STRONG><a name="[e2]"></a>ST7735_DrawString</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, st7735.o(.text.ST7735_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutDec
</UL>

<P><STRONG><a name="[df]"></a>ST7735_FillRect</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
</UL>

<P><STRONG><a name="[e4]"></a>ST7735_FillScreen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[ce]"></a>ST7735_InitR</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_InitR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[e9]"></a>ST7735_Message</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ST7735_Message &rArr; ST7735_OutDec &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutDec
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapStats
</UL>

<P><STRONG><a name="[ec]"></a>ST7735_OutChar</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutDec
</UL>

<P><STRONG><a name="[eb]"></a>ST7735_OutDec</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_OutDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ST7735_OutDec &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[ea]"></a>ST7735_OutString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_OutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[e8]"></a>ST7735_SetCursor</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, st7735.o(.text.ST7735_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7735_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[82]"></a>SW1Push</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, heaptester.o(.text.SW1Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = SW1Push &rArr; OS_AddThread &rArr; GetPriPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> heaptester.o(.text.main)
</UL>
<P><STRONG><a name="[83]"></a>SW2Push</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, heaptester.o(.text.SW2Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = SW2Push &rArr; OS_AddThread &rArr; GetPriPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> heaptester.o(.text.main)
</UL>
<P><STRONG><a name="[dc]"></a>Scheduler</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, os.o(.text.Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContextSwitch
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, os.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateState
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPriPointer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>SysTick_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, os.o(.text.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[7f]"></a>TestHeap</STRONG> (Thumb, 1640 bytes, Stack size 64 bytes, heaptester.o(.text.TestHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TestHeap &rArr; heapStats &rArr; ST7735_Message &rArr; ST7735_OutDec &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapStats
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapError
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Realloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Calloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> heaptester.o(.text.SW1Push)
</UL>
<P><STRONG><a name="[1f]"></a>Timer1A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer1a.o(.text.Timer1A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer2A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer2a.o(.text.Timer2A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Timer5A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer5a.o(.text.Timer5A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>Timer5A_Init</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, timer5a.o(.text.Timer5A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Timer5A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTimerInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCPUUtilization
</UL>

<P><STRONG><a name="[101]"></a>Timer5A_Stop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer5a.o(.text.Timer5A_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCPUUtilization
</UL>

<P><STRONG><a name="[100]"></a>TxFifo_Get</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fifosimple.o(.text.TxFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[f9]"></a>TxFifo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.TxFifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fb]"></a>TxFifo_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fifosimple.o(.text.TxFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[f6]"></a>TxFifo_Size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.TxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[f]"></a>UART0_Handler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, uart0int.o(.text.UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = UART0_Handler &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>UART_Init</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, uart0int.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[fa]"></a>UART_OutChar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart0int.o(.text.UART_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_OutChar &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Put
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[50]"></a>WideTimer0A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wtimer0a.o(.text.WideTimer0A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>Worst_Heap_Calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, heapworstfit.o(.text.Worst_Heap_Calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Worst_Heap_Calloc &rArr; Worst_Heap_Malloc &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Realloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Calloc
</UL>

<P><STRONG><a name="[b4]"></a>Worst_Heap_Free</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, heapworstfit.o(.text.Worst_Heap_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Worst_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
</UL>

<P><STRONG><a name="[b7]"></a>Worst_Heap_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heapworstfit.o(.text.Worst_Heap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Worst_Heap_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
</UL>

<P><STRONG><a name="[ba]"></a>Worst_Heap_Malloc</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, heapworstfit.o(.text.Worst_Heap_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Worst_Heap_Malloc &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Worst_Heap_Calloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
</UL>

<P><STRONG><a name="[c0]"></a>Worst_Heap_Stats</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, heapworstfit.o(.text.Worst_Heap_Stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Worst_Heap_Stats
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Stats
</UL>

<P><STRONG><a name="[c8]"></a>appendToList</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os.o(.text.appendToList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appendToList
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[c4]"></a>cutBlock</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, heapknuth.o(.text.cutBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = cutBlock &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Malloc
</UL>

<P><STRONG><a name="[ed]"></a>fillmessage</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, st7735.o(.text.fillmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = fillmessage &rArr;  fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutDec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>

<P><STRONG><a name="[85]"></a>fputc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; UART_OutChar &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[f3]"></a>heapError</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, heaptester.o(.text.heapError))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = heapError &rArr; OS_Kill &rArr; Heap_Free &rArr; Worst_Heap_Free &rArr; OS_bSignal &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapStats
</UL>

<P><STRONG><a name="[f4]"></a>heapStats</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, heaptester.o(.text.heapStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = heapStats &rArr; ST7735_Message &rArr; ST7735_OutDec &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapError
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Stats
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
</UL>

<P><STRONG><a name="[d0]"></a>initCPUUtilization</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, os.o(.text.initCPUUtilization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = initCPUUtilization &rArr; Timer5A_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5A_Stop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5A_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[d2]"></a>initTCBs</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, os.o(.text.initTCBs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = initTCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[7c]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, heaptester.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = main &rArr; OS_Init &rArr; ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSW2Task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSW1Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c3]"></a>mergeBlock</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, heapknuth.o(.text.mergeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = mergeBlock &rArr;  mergeBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mergeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mergeBlock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knuth_Heap_Free
</UL>

<P><STRONG><a name="[d4]"></a>removeFromList</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, os.o(.text.removeFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = removeFromList
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[80]"></a>stressTestHeap</STRONG> (Thumb, 942 bytes, Stack size 704 bytes, heaptester.o(.text.stressTestHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = stressTestHeap &rArr; Heap_Malloc &rArr; Knuth_Heap_Malloc &rArr;  Knuth_Heap_Malloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Stats
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TimeDifference
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> heaptester.o(.text.SW2Push)
</UL>
<P><STRONG><a name="[db]"></a>updateState</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, os.o(.text.updateState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = updateState
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[81]"></a>waitTenms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os.o(.text.waitTenms))
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text.initCPUUtilization)
</UL>
<P><STRONG><a name="[108]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[125]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[126]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[127]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f2]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stressTestHeap
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heapError
</UL>

<P><STRONG><a name="[10a]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[128]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[129]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[12a]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[f1]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHeap
</UL>

<P><STRONG><a name="[12b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[12c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[12d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c9]"></a>IsInISR</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, os.o(.text.IsInISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsInISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
</UL>

<P><STRONG><a name="[e5]"></a>commonInit</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, st7735.o(.text.commonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = commonInit &rArr; commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[e6]"></a>commandList</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, st7735.o(.text.commandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[e7]"></a>writecommand</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, st7735.o(.text.writecommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[e3]"></a>writedata</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, st7735.o(.text.writedata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[e0]"></a>setAddrWindow</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, st7735.o(.text.setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>

<P><STRONG><a name="[e1]"></a>pushColor</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st7735.o(.text.pushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pushColor &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[f5]"></a>copySoftwareToHardware</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart0int.o(.text.copySoftwareToHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[f7]"></a>copyHardwareToSoftware</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart0int.o(.text.copyHardwareToSoftware))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copyHardwareToSoftware &rArr; RxFifo_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Put
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[10b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[109]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[10e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[86]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
