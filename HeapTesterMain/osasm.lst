


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           NextPt      ; Next thread, dete
                                                            rmined by scheduler
                                                            
   15 00000000                 EXTERN           savedSP
   16 00000000                 EXPORT           StartOS
   17 00000000                 EXPORT           ContextSwitch
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000                 EXPORT           SVC_Handler
   20 00000000                 EXPORT           Wait
   21 00000000                 EXPORT           Signal
   22 00000000                 EXPORT           bWait
   23 00000000                 EXPORT           bSignal
   24 00000000         
   25 00000000         
   26 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   27 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   28 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   29 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   30 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   31 00000000 10000000 
                       NVIC_PENDSVSET



ARM Macro Assembler    Page 2 


                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   32 00000000         
   33 00000000         
   34 00000000         StartOS
   35 00000000 4842            LDR              R0, =RunPt  ; Pointer to RunPt
   36 00000002 6801            LDR              R1, [R0]    ; Load RunPt to R1
   37 00000004 F8D1 D000       LDR              SP, [R1]    ; Set the stack poi
                                                            nter from RunPt
   38 00000008 E8BD 0FF0       POP              {R4-R11}    ; Pop R4-R11 from s
                                                            tack
   39 0000000C BC0F            POP              {R0-R3}     ; Pop R0-R3 from st
                                                            ack
   40 0000000E F85D CB04       POP              {R12}       ; Pop R12 from stac
                                                            k
   41 00000012 BC02            POP              {R1}        ; Discard LR from i
                                                            nitial stack
   42 00000014 F85D EB04       POP              {LR}        ; Start task
   43 00000018 BC02            POP              {R1}        ; Discard PSR
   44 0000001A 483D            LDR              R0, =NVIC_SYSPRI15 ; Load addre
                                                            ss of SysTick prior
                                                            ity register
   45 0000001C F04F 01FF       LDR              R1, =NVIC_LEVEL15 ; Load desire
                                                            d priority level
   46 00000020 7001            STRB             R1, [R0]    ; Set the SysTick p
                                                            riority
   47 00000022 483C            LDR              R0, =NVIC_SYSPRI14 ; Load addre
                                                            ss of PendSV priori
                                                            ty register
   48 00000024 F04F 01EF       LDR              R1, =NVIC_LEVEL14 ; Load desire
                                                            d priority level
   49 00000028 7001            STRB             R1, [R0]    ; Set the PendSV pr
                                                            iority
   50 0000002A B662            CPSIE            I           ; Enable interrupts
                                                            
   51 0000002C 4770            BX               LR
   52 0000002E         
   53 0000002E         StartOSHang
   54 0000002E E7FE            B                StartOSHang ; Should never get 
                                                            here
   55 00000030         
   56 00000030         StartOSCustom
   57 00000030         ; put your code here
   58 00000030 4685            MOV              SP,R0
   59 00000032 4837            LDR              R0, =NVIC_SYSPRI15 ; Load addre
                                                            ss of SysTick prior
                                                            ity register
   60 00000034 F04F 01FF       LDR              R1, =NVIC_LEVEL15 ; Load desire
                                                            d priority level
   61 00000038 7001            STRB             R1, [R0]    ; Set the SysTick p
                                                            riority
   62 0000003A 4836            LDR              R0, =NVIC_SYSPRI14 ; Load addre
                                                            ss of PendSV priori
                                                            ty register
   63 0000003C F04F 01EF       LDR              R1, =NVIC_LEVEL14 ; Load desire
                                                            d priority level
   64 00000040 7001            STRB             R1, [R0]    ; Set the PendSV pr
                                                            iority
   65 00000042 E8BD 5FFF       POP              {R0-R12,LR}



ARM Macro Assembler    Page 3 


   66 00000046 4770            BX               LR          ; start first threa
                                                            d
   67 00000048         
   68 00000048         OSStartHang
   69 00000048 E7FE            B                OSStartHang ; Should never get 
                                                            here
   70 0000004A         
   71 0000004A         
   72 0000004A         ;*******************************************************
                       *************************************************
   73 0000004A         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   74 0000004A         ;                                           void Context
                       Switch(void)
   75 0000004A         ;
   76 0000004A         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   77 0000004A         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   78 0000004A         ;*******************************************************
                       *************************************************
   79 0000004A         
   80 0000004A         ContextSwitch
   81 0000004A         ; edit this code
   82 0000004A 4833            LDR              R0, =NVIC_INT_CTRL ; Load addre
                                                            ss of interrupt con
                                                            trol state register
                                                            
   83 0000004C F04F 5180       LDR              R1, =NVIC_PENDSVSET ; Load Pend
                                                            SV set value
   84 00000050 6001            STR              R1, [R0]    ; Write to trigger 
                                                            PendSV
   85 00000052 4770            BX               LR          ; 
   86 00000054         
   87 00000054         
   88 00000054         ;*******************************************************
                       *************************************************
   89 00000054         ;                                         HANDLE PendSV 
                       EXCEPTION
   90 00000054         ;                                     void OS_CPU_PendSV
                       Handler(void)
   91 00000054         ;
   92 00000054         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   93 00000054         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   94 00000054         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   95 00000054         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   96 00000054         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   97 00000054         ;              a thread or occurs due to an interrupt or
                        exception.
   98 00000054         ;
   99 00000054         ;           2) Pseudo-code is:
  100 00000054         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  101 00000054         ;              b) Save remaining regs r4-r11 on process 



ARM Macro Assembler    Page 4 


                       stack;
  102 00000054         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  103 00000054         ;              d) Call OSTaskSwHook();
  104 00000054         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  105 00000054         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  106 00000054         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  107 00000054         ;              h) Restore R4-R11 from new process stack;
                       
  108 00000054         ;              i) Perform exception return which will re
                       store remaining context.
  109 00000054         ;
  110 00000054         ;           3) On entry into PendSV handler:
  111 00000054         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  112 00000054         ;                 xPSR, PC, LR, R12, R0-R3
  113 00000054         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  114 00000054         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  115 00000054         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  116 00000054         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  117 00000054         ;
  118 00000054         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  119 00000054         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  120 00000054         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  121 00000054         ;*******************************************************
                       *************************************************
  122 00000054         
  123 00000054         PendSV_Handler
  124 00000054         ; put your code here
  125 00000054 B672            CPSID            I           ; Disable interrupt
                                                            s
  126 00000056 E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs
  127 0000005A 482C            LDR              R0, =RunPt  ; Pointer to the ru
                                                            n pointer store in 
                                                            R0
  128 0000005C 6801            LDR              R1, [R0]    ; Run pointer into 
                                                            R1
  129 0000005E F8C1 D000       STR              SP, [R1]    ; Load the stack po
                                                            inter to the addres
                                                            s of the run pointe
                                                            r
  130 00000062         ; LDR  R1, [R1,#4]  ; Load the next TCB to R1
  131 00000062 492E            LDR              R1, =NextPt ; Pointer to NextPt
                                                            
  132 00000064 6809            LDR              R1, [R1]    ; Address of the ne
                                                            xt tcb
  133 00000066 6001            STR              R1, [R0]    ; Store the next TC
                                                            B in the run pointe



ARM Macro Assembler    Page 5 


                                                            r
  134 00000068 F8D1 D000       LDR              SP, [R1]    ; Load the stack po
                                                            inter from the new 
                                                            run TCB
  135 0000006C E8BD 0FF0       POP              {R4-R11}    ; Restore Regs
  136 00000070 B662            CPSIE            I           ; Interrupts Enable
                                                            d    
  137 00000072 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  138 00000074         
  139 00000074         
  140 00000074         ;*******************************************************
                       *************************************************
  141 00000074         ;                                         HANDLE SVC EXC
                       EPTION
  142 00000074         ;                                     void OS_CPU_SVCHan
                       dler(void)
  143 00000074         ;
  144 00000074         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  145 00000074         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  146 00000074         ;           found relative to the return address saved o
                       n the stack on exception entry.
  147 00000074         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  148 00000074         ;*******************************************************
                       *************************************************
  149 00000074         
  150 00000074                 IMPORT           OS_Id
  151 00000074                 IMPORT           OS_Kill
  152 00000074                 IMPORT           OS_Sleep
  153 00000074                 IMPORT           OS_Time
  154 00000074                 IMPORT           OS_AddThread
  155 00000074         
  156 00000074         
  157 00000074         ; Define the branch table
  158 00000074         
  159 00000074         
  160 00000074         
  161 00000074         SVC_Handler
  162 00000074         ; put your Lab 5 code here
  163 00000074 F8DD C018       LDR              R12,[SP,#24] ; Return address
  164 00000078 F83C CC02       LDRH             R12,[R12,#-2] ; SVC instruction
                                                             is 2 bytes
  165 0000007C F42C 4C7F       BIC              R12,#0xFF00 ; Extract ID in R12
                                                            
  166 00000080 E89D 000F       LDM              SP,{R0-R3}  ; Get any parameter
                                                            s
  167 00000084 B500            PUSH             {LR}
  168 00000086         
  169 00000086 F1BC 0F00       CMP              R12, #0
  170 0000008A BF08 F7FF 
              FFFE             BLEQ             OS_Id
  171 00000090         
  172 00000090 F1BC 0F01       CMP              R12, #1
  173 00000094 BF08 F7FF 
              FFFE             BLEQ             OS_Kill



ARM Macro Assembler    Page 6 


  174 0000009A         
  175 0000009A F1BC 0F02       CMP              R12, #2
  176 0000009E BF08 F7FF 
              FFFE             BLEQ             OS_Sleep
  177 000000A4         
  178 000000A4 F1BC 0F03       CMP              R12, #3
  179 000000A8 BF08 F7FF 
              FFFE             BLEQ             OS_Time
  180 000000AE         
  181 000000AE F1BC 0F04       CMP              R12, #4
  182 000000B2 BF08 F7FF 
              FFFE             BLEQ             OS_AddThread
  183 000000B8         
  184 000000B8 F85D EB04       POP              {LR}
  185 000000BC 9000            STR              R0,[SP]     ; Store return valu
                                                            e
  186 000000BE 4770            BX               LR          ; Return from excep
                                                            tion
  187 000000C0         
  188 000000C0         
  189 000000C0         ;*******************************************************
                       **************************************************
  190 000000C0         ; IPC Primitives
  191 000000C0         ; Assembly implementation of the IPC primitives Wait, Si
                       gnal, bWait and bSignal
  192 000000C0         ; 
  193 000000C0         ; 
  194 000000C0         ;*******************************************************
                       **************************************************
  195 000000C0         ; Wait for the semaphore to be nonzero, then decrement
  196 000000C0         ; Repeat if the exclusive store fails
  197 000000C0         Wait
  198 000000C0 E850 1F00       LDREX            R1, [R0]    ; counter
  199 000000C4 3901            SUBS             R1, #1      ; --counter
  200 000000C6 BF5C            ITT              PL          ; ok if >= 0
  201 000000C8 E840 1200       STREXPL          R2,R1,[R0]  ; try update
  202 000000CC 2A00            CMPPL            R2, #0      ; succeed?
  203 000000CE D1FE            BNE              Wait        ; no, try again
  204 000000D0 4770            BX               LR
  205 000000D2         
  206 000000D2         ; Increment the semaphore unconditionally
  207 000000D2         ; Repeat if the exclusive store fails
  208 000000D2         Signal
  209 000000D2 E850 1F00       LDREX            R1, [R0]    ; counter
  210 000000D6 F101 0101       ADD              R1, #1      ; ++counter
  211 000000DA E840 1200       STREX            R2,R1,[R0]  ; try update
  212 000000DE 2A00            CMP              R2, #0      ; succed?
  213 000000E0 D1FE            BNE              Signal      ; no, try again
  214 000000E2 4770            BX               LR
  215 000000E4         
  216 000000E4         ; Wait for the semaphore to be nonzero, then set it to 0
                       
  217 000000E4         ; Repeat if the exclusive store fails
  218 000000E4         bWait
  219 000000E4 E850 1F00       LDREX            R1, [R0]    ; counter
  220 000000E8 2900            CMP              R1, #0      ; sema==0?
  221 000000EA D0FE            BEQ              bWait       ; no, try again
  222 000000EC F04F 0100       MOV              R1, #0      ; counter=0
  223 000000F0 E840 1200       STREX            R2,R1,[R0]  ; try update



ARM Macro Assembler    Page 7 


  224 000000F4 2A00            CMP              R2, #0      ; succeed?
  225 000000F6 D1FE            BNE              bWait       ; no, try again
  226 000000F8 4770            BX               LR
  227 000000FA         
  228 000000FA         ; Set the semaphore to 1, unconditionally
  229 000000FA         ; Repeat if the exclusive store fails
  230 000000FA         bSignal
  231 000000FA E850 1F00       LDREX            R1, [R0]    ; counter
  232 000000FE F04F 0101       MOV              R1, #1      ; counter=1
  233 00000102 E840 1200       STREX            R2,R1,[R0]  ; try update
  234 00000106 2A00            CMP              R2, #0      ; succeed?
  235 00000108 D1FE            BNE              bSignal     ; no, try again
  236 0000010A 4770            BX               LR
  237 0000010C         
  238 0000010C         ;*******************************************************
                       **************************************************
  239 0000010C         
  240 0000010C                 ALIGN
  241 0000010C                 END
              00000000 
              E000ED23 
              E000ED22 
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\osasm.d -o.\osasm.o -IC:\Users\awp\AppData\Local\Arm\Packs\K
eil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__MICROLIB SETA 1" --pre
define="__UVISION_VERSION SETA 539" --predefine="TM4C123GH6PM SETA 1" --list=.\
osasm.lst ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 0000004A

Symbol: ContextSwitch
   Definitions
      At line 80 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
OSStartHang 00000048

Symbol: OSStartHang
   Definitions
      At line 68 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 69 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 00000054

Symbol: PendSV_Handler
   Definitions
      At line 123 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SVC_Handler 00000074

Symbol: SVC_Handler
   Definitions
      At line 161 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
Signal 000000D2

Symbol: Signal
   Definitions
      At line 208 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 21 in file ..\RTOS_Labs_common\osasm.s
      At line 213 in file ..\RTOS_Labs_common\osasm.s

StartOS 00000000

Symbol: StartOS
   Definitions
      At line 34 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
StartOSCustom 00000030




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: StartOSCustom
   Definitions
      At line 56 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: StartOSCustom unused
StartOSHang 0000002E

Symbol: StartOSHang
   Definitions
      At line 53 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 54 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOSHang used once
Wait 000000C0

Symbol: Wait
   Definitions
      At line 197 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 20 in file ..\RTOS_Labs_common\osasm.s
      At line 203 in file ..\RTOS_Labs_common\osasm.s

bSignal 000000FA

Symbol: bSignal
   Definitions
      At line 230 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 23 in file ..\RTOS_Labs_common\osasm.s
      At line 235 in file ..\RTOS_Labs_common\osasm.s

bWait 000000E4

Symbol: bWait
   Definitions
      At line 218 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 22 in file ..\RTOS_Labs_common\osasm.s
      At line 221 in file ..\RTOS_Labs_common\osasm.s
      At line 225 in file ..\RTOS_Labs_common\osasm.s

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 82 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_INT_CTRL used once
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 29 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 48 in file ..\RTOS_Labs_common\osasm.s
      At line 63 in file ..\RTOS_Labs_common\osasm.s

NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 45 in file ..\RTOS_Labs_common\osasm.s
      At line 60 in file ..\RTOS_Labs_common\osasm.s

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 31 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 83 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 47 in file ..\RTOS_Labs_common\osasm.s
      At line 62 in file ..\RTOS_Labs_common\osasm.s

NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 28 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 44 in file ..\RTOS_Labs_common\osasm.s
      At line 59 in file ..\RTOS_Labs_common\osasm.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NextPt 00000000

Symbol: NextPt
   Definitions
      At line 14 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 131 in file ..\RTOS_Labs_common\osasm.s
Comment: NextPt used once
OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 154 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 182 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_AddThread used once
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 150 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 170 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Id used once
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 151 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 173 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Kill used once
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 152 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 176 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Sleep used once
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 153 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 179 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Time used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 35 in file ..\RTOS_Labs_common\osasm.s
      At line 127 in file ..\RTOS_Labs_common\osasm.s

savedSP 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: savedSP
   Definitions
      At line 15 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: savedSP unused
8 symbols
361 symbols in table
